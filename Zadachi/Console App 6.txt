1.В следващите редове се дефинират променливи, представляващи размера на раницата W, теглата weights и стойностите values на предметите. Във вашия пример, W е 10, weights са [7, 3, 4, 5], а values са [42, 12, 40, 25].
2.Следващите два реда определят броят на предметите n и създават двумерен масив dp с размерности (n+1) x (W+1). Този масив ще се използва за съхранение на максималната стойност, която може да бъде постигната с даден брой предмети и даден обем на раницата.
3.Следва два вложени цикъла, където се използва динамично програмиране, за да се намери максималната стойност, която може да се постигне. Вътрешният цикъл обхожда възможните тегла (от 1 до W) и вътрешният обхожда предметите (от 1 до n).
4.В зависимост от дали теглото на текущия предмет може да бъде поставено в раницата (weights[i - 1] <= w), се решава дали да се вземе текущия предмет или не. Ако теглото може да се постави в раницата, се избира по-голямата от двата варианта: а) вземане на текущия предмет (прибавя се към предишната максимална стойност с предмети с тегло w - weights[i - 1]), б) не вземане на текущия предмет (остава максималната стойност без него).
5.След като приключат вложените цикли, dp[n, W] съдържа максималната стойност, която може да бъде постигната с дадените предмети и даден обем на раницата.
6.Следващата част от кода проследява кои предмети са били взети, за да се достигне до тази максимална стойност. Тя използва обратно проследяване: започва с последния предмет и проверява дали стойността с предмета се е променила. Ако да, този предмет е взет, и продължаваме със следващия.
7.Извежда се тоталната стойност на взетите предмети и оставащото място в раницата.